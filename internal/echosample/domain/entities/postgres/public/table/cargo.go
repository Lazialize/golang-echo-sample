//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cargo = newCargoTable("public", "cargo", "")

type cargoTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	CreatedBy postgres.ColumnInteger
	UpdatedAt postgres.ColumnTimestamp
	UpdatedBy postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CargoTable struct {
	cargoTable

	EXCLUDED cargoTable
}

// AS creates new CargoTable with assigned alias
func (a CargoTable) AS(alias string) *CargoTable {
	return newCargoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CargoTable with assigned schema name
func (a CargoTable) FromSchema(schemaName string) *CargoTable {
	return newCargoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CargoTable with assigned table prefix
func (a CargoTable) WithPrefix(prefix string) *CargoTable {
	return newCargoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CargoTable with assigned table suffix
func (a CargoTable) WithSuffix(suffix string) *CargoTable {
	return newCargoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCargoTable(schemaName, tableName, alias string) *CargoTable {
	return &CargoTable{
		cargoTable: newCargoTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newCargoTableImpl("", "excluded", ""),
	}
}

func newCargoTableImpl(schemaName, tableName, alias string) cargoTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn}
	)

	return cargoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,
		CreatedBy: CreatedByColumn,
		UpdatedAt: UpdatedAtColumn,
		UpdatedBy: UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
